#CCLF load cell voltage to force conversion - calibrated manually
LOAD_OFFSET = 7.08 #5.7551 #-8.0
LOAD_GAIN = 261.67 #258 #0.0256

### far-field parameters for continuous CCLF loading ###
FF_STILLS_HEIGHT = 1.0	 #beam height in mm
FF_STILLS_WIDTH = 3.0    #beam width in mm
FF_STILLS_NIMAGES = 4    #sync_ct might like to have a minimum of 2 frames but 1 seems ok...wm
FF_STILLS_EXPTIME = 0.25 #dexela exposure time in s

#RAMS only:
CONT_SCREW_TOL = 0.001 #tolerance on relative screw head position for stopping continuous loading

### DIC parameters ###
DIC_EXPTIME = 0.25
DIC_OME = -15.813
DIC_Z =  11.828


### far-field parameters ###
FF_START = 0
FF_DEG = 360
FF_EXPTIME = 0.25
FF_ATTEN = 2.75
FF_NIMAGES = 1440
FF_HEIGHT = 0.1
FF_WIDTH = 3.0
FF_GUARD_HEIGHT = 2


### energy checks parameters ###
ECHECK_HEIGHT = 1
ECHECK_WIDTH = 2
ECHECK_TIME = 1
ECHECK_IC0_GAIN = 11
ECHECK_IC1_GAIN = 11 
#17 = gain of 500 nA/V
#16 = gain of 200 nA/V
#11 = gain of 5nA/V 
#12 = gain of 10 nA/V 
#15 = gain of 100 nA/V
#13 = gain of 20 nA/V


### near-field parameters ###
NF_START= 0.0
NF_DEG = 360 
NF_EXPTIME = 10
NF_ATTEN = 0
NF_NIMAGES = 1440
NF_HEIGHT = 0.05
NF_WIDTH = 3
NF_GUARD_HEIGHT = 0.1


### tomo parameters ###
TOMO_ATTEN = 0
TOMO_START= 0.0
TOMO_DEG= 180
TOMO_IMAGES = 1440
TOMO_EXPTIME =  1
TOMO_HEIGHT = 1.0
TOMO_WIDTH = 3
TOMO_GUARD_HEIGHT = 2
#----------near-field beamstop position for tomo:
NFBSZ_OUT = 2

# tomo dark/bright parameters #
TOMO_DFBF_START = 0
TOMO_DFBF_DEG = 10
TOMO_DFBBF_IMAGES = 20
TOMO_DFBF_EXPTIME = TOMO_EXPTIME

# special tomo parameters #
TOMO_EXPTIME_CONT = 1.0 #used for cont_tomo
TOMO_IMAGES_CONT = 180 #used for cont_tomo

### rad parameters ###
RAD_EXPTIME = 1
RAD_ATTEN = 0.25
RAD_HEIGHT = 0.7
RAD_OME = 91.9255
RAD_Z= -0.13
RAD_WIDTH = 2.0

#################
### CCLF ########
#################

def _get_cclf_load() '{
    ct 0.1
        
    load_voltage=epics_get("ID3A_CNT04_VLT")
    
    load_val=(load_voltage*LOAD_GAIN)+LOAD_OFFSET
    
    return load_val
}'


def get_cclf_load '{

    print _get_cclf_load()
}'

def _get_cclf_volts() '{
    ct 0.1
        
    load_voltage=epics_get("ID3A_CNT04_VLT")
    
    return load_voltage
}'


def get_cclf_volts '{

    print _get_cclf_volts()
}'

def continuous_ff_cclf '{
    local k, ff_stills_atten

    if ($# != 1) {
        eprint "Usage:  continuous_ff_cclf ff_stills_atten"
        exit
    }    
    cdef("cleanup_once", "continuous_ff_abort;", "_continuous_ff_cleanup_")    
  
    ff_stills_atten = $1
    
    if (SYNC_FF_MODE != 1) {
        eprint "not in far-field mode"
        exit
    }

    #umv ome DIC_OME

    #set up the par file to record stuff at each sync_ct
    local par_fname, contff_par_col, contff_par_col_json, contff_par_col_json_fname
    par_fname = sprintf("%s/%s/continuous_ff_cclf_series.par",DAQROOT,SAMPLEID)

    contff_par_col[0] = "date"
    contff_par_col[1] = "time"
    contff_par_col[2] = "epoch"
    contff_par_col[3] = "SCAN_N"
    contff_par_col[4] = "DEX1 filenumber"
    contff_par_col[5] = "DEX2 filenumber"    
    contff_par_col[6] = "load"
    contff_par_col[7] = "cclf temp"
    contff_par_col_json = encode("json",contff_par_col)
    contff_par_col_json_fname = sprintf("%s/%s/continuous_ff_cclf_series.json", DAQROOT, SAMPLEID)
    if (file_info(contff_par_col_json_fname, "-e") != 1) {
        open(contff_par_col_json_fname)
        fprintf(contff_par_col_json_fname, contff_par_col_json)
        close(contff_par_col_json_fname)
    }
    
    atten ff_stills_atten
    set_beam_height FF_STILLS_HEIGHT	
    set_beam_width FF_STILLS_WIDTH
    
    comment "runnning energy check"
    ic_gain_check
    atten ff_stills_atten
    set_beam_height FF_STILLS_HEIGHT	
    set_beam_width FF_STILLS_WIDTH

    comment "collecting no load scan"    

    sync_ct FF_STILLS_NIMAGES FF_STILLS_EXPTIME 
    open(par_fname)     
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber"), epics_get("DEX2:HDF1:FileNumber"), _get_cclf_load(), epics_get("ID3A_NANODAC_CH04_T"))
    close(par_fname)

    take_dic
    take_dic
 
    comment "will sleep for 10s, start load now"
    sleep(10)
    comment "starting dic and ff"

    while(1) {
        sync_ct FF_STILLS_NIMAGES FF_STILLS_EXPTIME 
        open(par_fname)     
        fprintf(par_fname, "\n%s %s %d %d %d %d %g %g", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber"), epics_get("DEX2:HDF1:FileNumber"), _get_cclf_load(), epics_get("ID3A_NANODAC_CH04_T"))
        close(par_fname)
        take_dic
    }
      
}'


###DIC snaps####
def dic_continous'{ 

#set up the par file to record stuff at each sync_ct
    local par_fname, contff_par_col, contff_par_col_json, contff_par_col_json_fname
    par_fname = sprintf("%s/%s/continuous_ff_cclf_series.par",DAQROOT,SAMPLEID)

    contff_par_col[0] = "date"
    contff_par_col[1] = "time"
    contff_par_col[2] = "epoch"
    contff_par_col[3] = "SCAN_N"

    contff_par_col_json = encode("json",contff_par_col)
    contff_par_col_json_fname = sprintf("%s/%s/continuous_ff_cclf_series.json", DAQROOT, SAMPLEID)
    if (file_info(contff_par_col_json_fname, "-e") != 1) {
        open(contff_par_col_json_fname)
        fprintf(contff_par_col_json_fname, contff_par_col_json)
        close(contff_par_col_json_fname)
    }

    sleep(10)

    while(1) {
       open(par_fname)     
       fprintf(par_fname, "\n%s %s %d %d ", date("%Y%m%d"), date("%H%M%S"), time(),    SCAN_N)
       close(par_fname)
        take_dic
    }
}'

#################
### far-field ###
#################

def continuous_ff_stills_dic '{
    local k, rel_disp, rel_vel, rel_accel, crosshead_i, crosshead_now

    if ($# != 3) {
        eprint "Usage:  continuous_ff disp vel accel"
        exit
    }    
    cdef("cleanup_once", "continuous_ff_abort;", "_continuous_ff_cleanup_")    
    
    rel_disp = $1
    rel_vel = $2
    rel_accel = $3    
    
    if (SYNC_FF_MODE != 1) {
        eprint "not in far-field mode"
        exit
    }

    #rams_force_off #switch to displacement control

    ### Specify par and json file names. They are saved in DAQ sample directory ###
    exp_type = sprintf("rams2_ff_scan_layers-%s", SYNC_FF_DETECTOR)    
    fname_prefix = sprintf("id3a-%s-%s", exp_type, SAMPLENAME)
    par_fname = sprintf("%s/%s/%s.par",DAQROOT,SAMPLEID, fname_prefix)
    output_col_json_fname = sprintf("%s/%s/%s.json", DAQROOT, SAMPLEID, fname_prefix)
    ###################################################################################

    ### json object: par file array colum title 
    output_col[0] = "date"
    output_col[1] = "time"
    output_col[2] = "epoch"
    output_col[3] = "SCAN_N"    
    if (SYNC_FF_DETECTOR == "dexela") {
        output_col[4] = "dex1" #DEX1:HDF1:FileNumber
        output_col[5] = "dex2" #DEX2:HDF1:FileNumber
    } else if (SYNC_FF_DETECTOR == "ge") {
        output_col[4] = "ge2start"       
        output_col[5] = "ge2end"
    }
    output_col[6] = "ramsx"
    output_col[7] = "ramsz"
    output_col[8] = "load"
    output_col[9] = "screw"  
    output_col[10] = "screw encoder"    
    output_col[11] = "ome_start_req"
    output_col[12] = "ome_end_req"
    output_col[13] = "nframes_req"
    output_col[14] = "ome_start_real"
    output_col[15] = "ome_end_real"
    output_col[16] = "nframes_real"  
    output_col[17] = "step_real"
    output_col[18] = "count_time"
    output_col[19] = "foil_1"
    output_col[20] = "foil_2"
    output_col[21] = "foil_3"
    output_col[22] = "foil_4"        
    
    ### Convert output_col array to a json object
    ### Save as a json object file in sample DAQ if it does not already exist    
    output_col_json = encode("json",output_col)

    if (file_info(output_col_json_fname, "-e") != 1) {
        open(output_col_json_fname)
        fprintf(output_col_json_fname, output_col_json)
        close(output_col_json_fname)
    }
    sampleinfo_json = sprintf("%s/%s/sampleinfo.json", AUXROOT, SAMPLEID)     
    ### log information about the sample as appropriate ### 
    if (file_info(par_fname, "-e") != 1) {
        open(par_fname)
        fprintf(par_fname, "#SAMPLENAME: %s\n#STATION: ID3A\n#EXPTYPE: %s\n", SAMPLENAME, exp_type)
        close(par_fname)
        if (file_info(sampleinfo_json, "-e") == 1) {
            sampleinfo_obj = getline(sampleinfo_json,0)
            sampleinfo_array = decode("json", sampleinfo_obj)
            for (sampleinfo_elem in sampleinfo_array) {
                open(par_fname)
                fprintf(par_fname, "#%s: %s\n", sampleinfo_elem, sampleinfo_array[sampleinfo_elem])
                close(par_fname)
            }
        }
    }
    
    atten FF_STILLS_ATTEN
    set_beam_height FF_STILLS_HEIGHT	
    set_beam_width FF_STILLS_WIDTH
    
    comment "runnning energy check"
    ic_gain_check
    atten FF_STILLS_ATTEN
    set_beam_height FF_STILLS_HEIGHT	
    set_beam_width FF_STILLS_WIDTH

    umv ome DIC_OME
    umv ramsz DIC_Z

    comment "collecting no load DIC"
    take_dic
    take_dic

    comment "collecting no load FF scan"    

    sync_ct FF_STILLS_NIMAGES FF_STILLS_EXPTIME
    open(par_fname)     
	fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[sampXb], A[rsampz], _get_cclf_load(), 1, FF_START, FF_START+FF_DEG, FF_NIMAGES, FF_START, FF_START+FF_DEG, FF_NIMAGES, (FF_START+FF_DEG)/FF_NIMAGES,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
    close(par_fname)

    crosshead_i = _wm_screw()
    comment "Initial rams screw position is %g" "crosshead_i"
    mvr_screw rel_disp 0 rel_vel rel_accel 
    comment "movement started"    
    crosshead_now = crosshead_i
    
    if (rel_disp > 0) {
        while ((crosshead_now - crosshead_i) < (rel_disp-CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()" 
	    comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
            comment "collecting scan"

            sync_ct FF_STILLS_NIMAGES FF_STILLS_EXPTIME
            open(par_fname)
                fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[sampXb], A[rsampz], _get_cclf_load(), 1, FF_START, FF_START+FF_DEG, FF_NIMAGES, FF_START, FF_START+FF_DEG, FF_NIMAGES, (FF_START+FF_DEG)/FF_NIMAGES,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
            close(par_fname)

	    take_dic

            crosshead_now = _wm_screw()  
            if (((crosshead_now -crosshead_i)> (rel_disp-CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_ff done"
                exit
            }          
        }
        
    } else if (rel_disp < 0) {
        while ((crosshead_now - crosshead_i) > (rel_disp+CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()"        
            comment "collecting scan"

            sync_ct FF_STILLS_NIMAGES FF_STILLS_EXPTIME
            open(par_fname)
                fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[sampXb], A[rsampz], _get_cclf_load(), 1, FF_START, FF_START+FF_DEG, FF_NIMAGES, FF_START, FF_START+FF_DEG, FF_NIMAGES, (FF_START+FF_DEG)/FF_NIMAGES,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
            close(par_fname)

	    take_dic

            crosshead_now = _wm_screw()
            if (((crosshead_now-crosshead_i) < (rel_disp+CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_ff done"                
                exit
            }           
        
        }
    }
    mv_screw_abort    
}'

def do_ff_scan_layers_cclf '{
    local j, nlayers, layersize, z_center, layer_start
    local output_col, output_col_json, output_col_json_fname, sampleinfo_json, sampleinfo_obj, sampleinfo_array, sampleinfo_elem
    local foil_1, foil_2, foil_3, foil_4
    local first_image
    local dex1_nframes, dex2_nframes
    
    if (($# != 3) && ($# !=4)) {
        eprint "Usage:  do_ff_scan_layers_cclf nlayers layersize z_center [layer_start]"
        exit
    }
    
    nlayers = $1
    layersize = $2
    z_center = $3
    if ($# == 4) {
        layer_start = $4
    } else {
        layer_start = 1
    }
    
    if (layer_start > nlayers) {
        eprint "layer_start is greater than nlayers"
        exit
    }
    
    if (SYNC_FF_MODE != 1) {
        eprint "not in far-field mode"
        exit
    }

    set_beam_height FF_HEIGHT # just to be sure
    set_beam_width FF_WIDTH # just to be sure
    set_guard_height FF_GUARD_HEIGHT
    atten FF_ATTEN # just to be sure

    comment "runnning energy check"
    ic_gain_check
    atten FF_ATTEN
    set_beam_height FF_HEIGHT	
    set_beam_width FF_WIDTH

    sync_ct 2 FF_EXPTIME darkfield

    ###################################################################################
    ### Specify par and json file names. They are saved in DAQ sample directory ###
    exp_type = sprintf("cclf_ff_scan_layers-%s", SYNC_FF_DETECTOR)    
    fname_prefix = sprintf("id3a-%s-%s", exp_type, SAMPLENAME)
    par_fname = sprintf("%s/%s/%s.par",DAQROOT,SAMPLEID, fname_prefix)
    output_col_json_fname = sprintf("%s/%s/%s.json", DAQROOT, SAMPLEID, fname_prefix)
    ###################################################################################

    ### json object: par file array colum title 
    output_col[0] = "date"
    output_col[1] = "time"
    output_col[2] = "epoch"
    output_col[3] = "SCAN_N"    
    if (SYNC_FF_DETECTOR == "dexela") {
        output_col[4] = "dex1" #DEX1:HDF1:FileNumber
        output_col[5] = "dex2" #DEX2:HDF1:FileNumber
    } else if (SYNC_FF_DETECTOR == "ge") {
        output_col[4] = "ge2start"       
        output_col[5] = "ge2end"
    }
    output_col[6] = "sampXb" #"ramsx"
    output_col[7] = "rsampz" #"ramsz"
    output_col[8] = "load"
    output_col[9] = "screw"     
    output_col[10] = "ome_start_req"
    output_col[11] = "ome_end_req"
    output_col[12] = "nframes_req"
    output_col[13] = "ome_start_real"
    output_col[14] = "ome_end_real"
    output_col[15] = "nframes_real"  
    output_col[16] = "step_real"
    output_col[17] = "count_time"
    output_col[18] = "foil_1"
    output_col[19] = "foil_2"
    output_col[20] = "foil_3"
    output_col[21] = "foil_4"        
    
    ### Convert output_col array to a json object
    ### Save as a json object file in sample DAQ if it does not already exist    
    output_col_json = encode("json",output_col)

    if (file_info(output_col_json_fname, "-e") != 1) {
        open(output_col_json_fname)
        fprintf(output_col_json_fname, output_col_json)
        close(output_col_json_fname)
    }
    sampleinfo_json = sprintf("%s/%s/sampleinfo.json", AUXROOT, SAMPLEID)     
    ### log information about the sample as appropriate ### 
    if (file_info(par_fname, "-e") != 1) {
        open(par_fname)
        fprintf(par_fname, "#SAMPLENAME: %s\n#STATION: ID3A\n#EXPTYPE: %s\n", SAMPLENAME, exp_type)
        close(par_fname)
        if (file_info(sampleinfo_json, "-e") == 1) {
            sampleinfo_obj = getline(sampleinfo_json,0)
            sampleinfo_array = decode("json", sampleinfo_obj)
            for (sampleinfo_elem in sampleinfo_array) {
                open(par_fname)
                fprintf(par_fname, "#%s: %s\n", sampleinfo_elem, sampleinfo_array[sampleinfo_elem])
                close(par_fname)
            }
        }
    }
    
    comment "do_ff_scan_layers_cclf %d %g %g %d" "nlayers, layersize, z_center, layer_start"
    comment "=== beginning ff/load series ==="

    for (j=layer_start-1; j<nlayers; j++) {
        comment "=== Processing layer %d ==" "j+1"
        #umv ramsz (layersize*(-(nlayers/2)+1/2+j)+z_center)
        umv rsampz (layersize*(-(nlayers/2)+1/2+j)+z_center)
        
        if (SYNC_FF_DETECTOR == "ge") {
            first_image = epics_get("GE2:cam1:FileNumber")
        }

        slew_scan cclfome FF_START (FF_START+FF_DEG) FF_NIMAGES FF_EXPTIME        

        ### log good scans in par file ###
        if (SYNC_FF_DETECTOR == "dexela") {
            #check whether dexela frames were dropped...
            dex1_nframes = epics_get("DEX1:cam1:NumImagesCounter_RBV")
            dex2_nframes = epics_get("DEX2:cam1:NumImagesCounter_RBV")
            eprint sprintf("DEX1 collected %d frames", dex1_nframes)
            eprint sprintf("DEX2 collected %d frames", dex2_nframes)
            if (dex1_nframes != dex2_nframes){
                #if frames were dropped, repeat this layer
                eprint "dexela frame count mismatch, some frames may have been dropped - will repeat layers"
                j = j-1	
            } else {
                get_angles
                open(par_fname)
                fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[sampXb], A[rsampz], _get_cclf_load(), 1, FF_START, FF_START+FF_DEG, FF_NIMAGES, FF_START, FF_START+FF_DEG, FF_NIMAGES, (FF_START+FF_DEG)/FF_NIMAGES,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                close(par_fname)
            }
        } else if (SYNC_FF_DETECTOR == "ge") {
            get_angles
            open(par_fname)
            fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("GE2:cam1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
            close(par_fname)            
        }
	}
    umv cclfome FF_START
}'

def do_ff_scan_layers '{
    local j, nlayers, layersize, z_center, layer_start
    local output_col, output_col_json, output_col_json_fname, sampleinfo_json, sampleinfo_obj, sampleinfo_array, sampleinfo_elem
    local foil_1, foil_2, foil_3, foil_4
    local first_image
    local dex1_nframes, dex2_nframes
    
    if (($# != 3) && ($# !=4)) {
        eprint "Usage:  do_ff_scan_layers nlayers layersize z_center [layer_start]"
        exit
    }
    
    nlayers = $1
    layersize = $2
    z_center = $3
    if ($# == 4) {
        layer_start = $4
    } else {
        layer_start = 1
    }
    
    if (layer_start > nlayers) {
        eprint "layer_start is greater than nlayers"
        exit
    }
    
    if (SYNC_FF_MODE != 1) {
        eprint "not in far-field mode"
        exit
    }

    set_beam_height FF_HEIGHT # just to be sure
    set_beam_width FF_WIDTH # just to be sure
    set_guard_height FF_GUARD_HEIGHT
    atten FF_ATTEN # just to be sure

    comment "runnning energy check"
    ic_gain_check
    atten FF_ATTEN
    set_beam_height FF_HEIGHT	
    set_beam_width FF_WIDTH

    ###################################################################################
    ### Specify par and json file names. They are saved in DAQ sample directory ###
    exp_type = sprintf("rams2_ff_scan_layers-%s", SYNC_FF_DETECTOR)    
    fname_prefix = sprintf("id3a-%s-%s", exp_type, SAMPLENAME)
    par_fname = sprintf("%s/%s/%s.par",DAQROOT,SAMPLEID, fname_prefix)
    output_col_json_fname = sprintf("%s/%s/%s.json", DAQROOT, SAMPLEID, fname_prefix)
    ###################################################################################

    ### json object: par file array colum title 
    output_col[0] = "date"
    output_col[1] = "time"
    output_col[2] = "epoch"
    output_col[3] = "SCAN_N"    
    if (SYNC_FF_DETECTOR == "dexela") {
        output_col[4] = "dex1" #DEX1:HDF1:FileNumber
        output_col[5] = "dex2" #DEX2:HDF1:FileNumber
    } else if (SYNC_FF_DETECTOR == "ge") {
        output_col[4] = "ge2start"       
        output_col[5] = "ge2end"
    }
    output_col[6] = "ramsx"
    output_col[7] = "ramsz"
    output_col[8] = "load"
    output_col[9] = "screw"  
    output_col[10] = "screw encoder"    
    output_col[11] = "ome_start_req"
    output_col[12] = "ome_end_req"
    output_col[13] = "nframes_req"
    output_col[14] = "ome_start_real"
    output_col[15] = "ome_end_real"
    output_col[16] = "nframes_real"  
    output_col[17] = "step_real"
    output_col[18] = "count_time"
    output_col[19] = "foil_1"
    output_col[20] = "foil_2"
    output_col[21] = "foil_3"
    output_col[22] = "foil_4"        
    
    ### Convert output_col array to a json object
    ### Save as a json object file in sample DAQ if it does not already exist    
    output_col_json = encode("json",output_col)

    if (file_info(output_col_json_fname, "-e") != 1) {
        open(output_col_json_fname)
        fprintf(output_col_json_fname, output_col_json)
        close(output_col_json_fname)
    }
    sampleinfo_json = sprintf("%s/%s/sampleinfo.json", AUXROOT, SAMPLEID)     
    ### log information about the sample as appropriate ### 
    if (file_info(par_fname, "-e") != 1) {
        open(par_fname)
        fprintf(par_fname, "#SAMPLENAME: %s\n#STATION: ID3A\n#EXPTYPE: %s\n", SAMPLENAME, exp_type)
        close(par_fname)
        if (file_info(sampleinfo_json, "-e") == 1) {
            sampleinfo_obj = getline(sampleinfo_json,0)
            sampleinfo_array = decode("json", sampleinfo_obj)
            for (sampleinfo_elem in sampleinfo_array) {
                open(par_fname)
                fprintf(par_fname, "#%s: %s\n", sampleinfo_elem, sampleinfo_array[sampleinfo_elem])
                close(par_fname)
            }
        }
    }
    
    comment "do_ff_scan_layers %d %g %g %d" "nlayers, layersize, z_center, layer_start"
    comment "=== beginning ff/load series ==="

    for (j=layer_start-1; j<nlayers; j++) {
        comment "=== Processing layer %d ==" "j+1"
        umv ramsz (layersize*(-(nlayers/2)+1/2+j)+z_center)
	##FOR CCLF        
	#umv sampz (layersize*(-(nlayers/2)+1/2+j)+z_center)
        
        if (SYNC_FF_DETECTOR == "ge") {
            first_image = epics_get("GE2:cam1:FileNumber")
        }

        slew_ome FF_START (FF_START+FF_DEG) FF_NIMAGES FF_EXPTIME        

        ### log good scans in par file ###
        if (SYNC_FF_DETECTOR == "dexela") {
            #check whether dexela frames were dropped...
            dex1_nframes = epics_get("DEX1:cam1:NumImagesCounter_RBV")
            dex2_nframes = epics_get("DEX2:cam1:NumImagesCounter_RBV")
            eprint sprintf("DEX1 collected %d frames", dex1_nframes)
            eprint sprintf("DEX2 collected %d frames", dex2_nframes)
            if (dex1_nframes != dex2_nframes){
                #if frames were dropped, repeat this layer
                eprint "dexela frame count mismatch, some frames may have been dropped - will repeat layers"
                j = j-1	
            } else {
                get_angles
                open(par_fname)
                fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), _wm_screw_encoder(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                close(par_fname)
            }
        } else if (SYNC_FF_DETECTOR == "ge") {
            get_angles
            open(par_fname)
            fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("GE2:cam1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), _wm_screw_encoder(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
            close(par_fname)            
        }
	}
    umv ome FF_START
}'

def do_ff_scan_layers_flip '{
    local j, nlayers, layersize, z_center, dex1_nframes, dex2_nframes, layer_start
    local output_col, output_col_json, output_col_json_fname, sampleinfo_json, sampleinfo_obj, sampleinfo_array, sampleinfo_elem
    local foil_1, foil_2, foil_3, foil_4    
    
    if (($# != 3) && ($# !=4)) {
        eprint "Usage:  do_ff_scan_layers_flip nlayers layersize z_center [layer_start]"
        exit
    }
    
    nlayers = $1
    layersize = $2
    z_center = $3
    if ($# == 4) {
        layer_start = $4
    } else {
        layer_start = nlayers
    }
    if (layer_start > nlayers) {
        eprint "layer_start is greater than nlayers"
        exit
    }
    if (SYNC_FF_MODE != 1) {
        eprint "not in far-field mode"
        exit
    }

    ###################################################################################
    ### Specify par and json file names. They are saved in DAQ sample directory ###
    exp_type = sprintf("rams2_ff_scan_layers-%s", SYNC_FF_DETECTOR)    
    fname_prefix = sprintf("id3a-%s-%s", exp_type, SAMPLENAME)    
    par_fname = sprintf("%s/%s/%s.par",DAQROOT,SAMPLEID, fname_prefix)    
    output_col_json_fname = sprintf("%s/%s/%s.json", DAQROOT, SAMPLEID, fname_prefix)
    ###################################################################################

    ### json object: par file array colum title 
    output_col[0] = "date"
    output_col[1] = "time"
    output_col[2] = "epoch"
    output_col[3] = "SCAN_N"    
    if (SYNC_FF_DETECTOR == "dexela") {
        output_col[4] = "dex1" #DEX1:HDF1:FileNumber
        output_col[5] = "dex2" #DEX2:HDF1:FileNumber
    } else if (SYNC_FF_DETECTOR == "ge") {
        output_col[4] = "ge2start"       
        output_col[5] = "ge2end"
    }
    output_col[6] = "ramsx"
    output_col[7] = "ramsz"
    output_col[8] = "load"
    output_col[9] = "screw"     
    output_col[10] = "ome_start_req"
    output_col[11] = "ome_end_req"
    output_col[12] = "nframes_req"
    output_col[13] = "ome_start_real"
    output_col[14] = "ome_end_real"
    output_col[15] = "nframes_real"  
    output_col[16] = "step_real"
    output_col[17] = "count_time"
    output_col[18] = "foil_1"
    output_col[19] = "foil_2"
    output_col[20] = "foil_3"
    output_col[21] = "foil_4"        
    
    ### Convert output_col array to a json object
    ### Save as a json object file in sample DAQ if it does not already exist    
    output_col_json = encode("json",output_col)

    if (file_info(output_col_json_fname, "-e") != 1) {
        open(output_col_json_fname)
        fprintf(output_col_json_fname, output_col_json)
        close(output_col_json_fname)
    }
    sampleinfo_json = sprintf("%s/%s/sampleinfo.json", AUXROOT, SAMPLEID) 
    exp_type = sprintf("ff_layers-%s", SYNC_FF_DETECTOR) 
    ### log information about the sample as appropriate ### 
    if (file_info(par_fname, "-e") != 1) {
        open(par_fname)
        fprintf(par_fname, "#SAMPLENAME: %s\n#STATION: ID3A\n#EXPTYPE: %s\n", SAMPLENAME, exp_type)
        close(par_fname)
        if (file_info(sampleinfo_json, "-e") == 1) {
            sampleinfo_obj = getline(sampleinfo_json,0)
            sampleinfo_array = decode("json", sampleinfo_obj)
            for (sampleinfo_elem in sampleinfo_array) {
                open(par_fname)
                fprintf(par_fname, "#%s: %s\n", sampleinfo_elem, sampleinfo_array[sampleinfo_elem])
                close(par_fname)
            }
        }
    }
    comment "do_ff_scan_layers_flip %d %g %g %d" "nlayers, layersize, z_center, layer_start"
    comment "=== beginning ff/load series ==="
 
    set_beam_height FF_HEIGHT # just to be sure
    set_beam_width FF_WIDTH # just to be sure
    atten FF_ATTEN # just to be sure

    for (j=layer_start-1; j>=0; j--) {
        comment "=== Processing layer %d ==" "j+1"
        umv ramsz (layersize*(-(nlayers/2)+1/2+j)+z_center)
        if (SYNC_FF_DETECTOR == "ge") {
            first_image = epics_get("GE2:cam1:FileNumber")
        }        
        slew_ome FF_START (FF_START+FF_DEG) FF_NIMAGES FF_EXPTIME
        
        ### log good scans in par file ###
        if (SYNC_FF_DETECTOR == "dexela") {                
            #check whether dexela frames were dropped...
            dex1_nframes = epics_get("DEX1:cam1:NumImagesCounter_RBV")
            dex2_nframes = epics_get("DEX2:cam1:NumImagesCounter_RBV")
            eprint sprintf("DEX1 collected %d frames", dex1_nframes)
            eprint sprintf("DEX2 collected %d frames", dex2_nframes)
            if (dex1_nframes != dex2_nframes){
                #if frames were dropped, repeat this layer
                eprint "dexela frame count mismatch, some frames may have been dropped - will repeat layers"
                j = j-1	
            } else {
                get_angles                
                open(par_fname)
                fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                close(par_fname)
            }
        } else if (SYNC_FF_DETECTOR == "ge") {
            get_angles            
            open(par_fname)
            fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("GE2:cam1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
            close(par_fname)            
        }
    }
    umv ome FF_START
}'


def continuous_ff '{
    local k, rel_disp, rel_vel, rel_accel, crosshead_i, crosshead_now
    local output_col, output_col_json, output_col_json_fname, sampleinfo_json, sampleinfo_obj, sampleinfo_array, sampleinfo_elem
    local foil_1, foil_2, foil_3, foil_4    

    if ($# != 3) {
        eprint "Usage:  continuous_ff disp vel accel"
        exit
    }    
    cdef("cleanup_once", "continuous_ff_abort;", "_continuous_ff_cleanup_")    
    
    rel_disp = $1
    rel_vel = $2
    rel_accel = $3    
    
    if (SYNC_FF_MODE != 1) {
        eprint "not in far-field mode"
        exit
    }
    
    atten FF_ATTEN
    set_beam_height FF_HEIGHT	
    set_beam_width FF_WIDTH
    
    comment "runnning energy check"
    ic_gain_check
    atten FF_ATTEN
    set_beam_height FF_HEIGHT	
    set_beam_width FF_WIDTH

    ###################################################################################
    ### Specify par and json file names. They are saved in DAQ sample directory ###    
    exp_type = sprintf("rams2_continuous_ff-%s", SYNC_FF_DETECTOR)    
    fname_prefix = sprintf("id3a-%s-%s", exp_type, SAMPLENAME)    
    par_fname = sprintf("%s/%s/%s.par",DAQROOT,SAMPLEID, fname_prefix)    
    output_col_json_fname = sprintf("%s/%s/%s.json", DAQROOT, SAMPLEID, fname_prefix)
    ###################################################################################
    
    ### json object: par file array colum title 
    output_col[0] = "date"
    output_col[1] = "time"
    output_col[2] = "epoch"
    output_col[3] = "SCAN_N"    
    if (SYNC_FF_DETECTOR == "dexela") {
        output_col[4] = "dex1" #DEX1:HDF1:FileNumber
        output_col[5] = "dex2" #DEX2:HDF1:FileNumber
    } else if (SYNC_FF_DETECTOR == "ge") {
        output_col[4] = "ge2start"       
        output_col[5] = "ge2end"
    }
    output_col[6] = "ramsx"
    output_col[7] = "ramsz"
    output_col[8] = "load"
    output_col[9] = "screw"     
    output_col[10] = "ome_start_req"
    output_col[11] = "ome_end_req"
    output_col[12] = "nframes_req"
    output_col[13] = "ome_start_real"
    output_col[14] = "ome_end_real"
    output_col[15] = "nframes_real"  
    output_col[16] = "step_real"
    output_col[17] = "count_time"
    output_col[18] = "foil_1"
    output_col[19] = "foil_2"
    output_col[20] = "foil_3"
    output_col[21] = "foil_4"
    
    ### Convert output_col array to a json object
    ### Save as a json object file in sample DAQ if it does not already exist    
    output_col_json = encode("json",output_col)

    if (file_info(output_col_json_fname, "-e") != 1) {
        open(output_col_json_fname)
        fprintf(output_col_json_fname, output_col_json)
        close(output_col_json_fname)
    }
    sampleinfo_json = sprintf("%s/%s/sampleinfo.json", AUXROOT, SAMPLEID) 
    ### log information about the sample as appropriate ### 
    if (file_info(par_fname, "-e") != 1) {
        open(par_fname)
        fprintf(par_fname, "#SAMPLENAME: %s\n#STATION: ID3A\n#EXPTYPE: %s\n", SAMPLENAME, exp_type)
        close(par_fname)
        if (file_info(sampleinfo_json, "-e") == 1) {
            sampleinfo_obj = getline(sampleinfo_json,0)
            sampleinfo_array = decode("json", sampleinfo_obj)
            for (sampleinfo_elem in sampleinfo_array) {
                open(par_fname)
                fprintf(par_fname, "#%s: %s\n", sampleinfo_elem, sampleinfo_array[sampleinfo_elem])
                close(par_fname)
            }
        }
    }
 
    comment "continuous_ff %g %g %g" "rel_disp, rel_vel, rel_accel"
    comment "collecting no load scan"    

    if (SYNC_FF_DETECTOR == "ge") {
        first_image = epics_get("GE2:cam1:FileNumber")
    }        
    
    slew_ome FF_START (FF_START+FF_DEG) FF_NIMAGES FF_EXPTIME
    get_angles
    
    if (SYNC_FF_DETECTOR == "dexela") {        
        open(par_fname)
        fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
        close(par_fname)
    } else if (SYNC_FF_DETECTOR == "ge") {        
        open(par_fname)
        fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("GE2:cam1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
        close(par_fname)                    
    }
    
    
    crosshead_i = _wm_screw()
    comment "Initial rams screw position is %g" "crosshead_i"
    mvr_screw rel_disp 0 rel_vel rel_accel 
    comment "movement started"    
    crosshead_now = crosshead_i
    
    if (rel_disp > 0) {
        while ((crosshead_now - crosshead_i) < (rel_disp-CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()" 
	        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
            comment "collecting scan"
            if (SYNC_FF_DETECTOR == "ge") {
                first_image = epics_get("GE2:cam1:FileNumber")
            }   
            slew_ome FF_START (FF_START+FF_DEG) FF_NIMAGES FF_EXPTIME        
            get_angles    
            
            if (SYNC_FF_DETECTOR == "dexela") {        
                open(par_fname)
                fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                close(par_fname)
            } else if (SYNC_FF_DETECTOR == "ge") {        
                open(par_fname)
                fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("GE2:cam1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                close(par_fname)                    
            }
            umv ome FF_START
            crosshead_now = _wm_screw()  
            if (((crosshead_now -crosshead_i)> (rel_disp-CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_ff done"
                exit
            }          
        }
        
    } else if (rel_disp < 0) {
        while ((crosshead_now - crosshead_i) > (rel_disp+CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()"        
            comment "collecting scan"
            
            if (SYNC_FF_DETECTOR == "ge") {
                first_image = epics_get("GE2:cam1:FileNumber")
            }   
            
            slew_ome FF_START (FF_START+FF_DEG) FF_NIMAGES FF_EXPTIME                    
            
            if (SYNC_FF_DETECTOR == "dexela") {        
                open(par_fname)
                fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                close(par_fname)
            } else if (SYNC_FF_DETECTOR == "ge") {        
                open(par_fname)
                fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("GE2:cam1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                close(par_fname)                    
            }
            umv ome FF_START
            crosshead_now = _wm_screw()
            if (((crosshead_now-crosshead_i) < (rel_disp+CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_ff done"                
                exit
            }
        }
    }
    mv_screw_abort    
}'


def continuous_ff_layers '{
    local k, rel_disp, rel_vel, rel_accel, crosshead_i, crosshead_now, nlayers, layersize, z_center, z_center_i, exit_loop
    local output_col, output_col_json, output_col_json_fname, sampleinfo_json, sampleinfo_obj, sampleinfo_array, sampleinfo_elem
    local foil_1, foil_2, foil_3, foil_4    

    if ($# != 6) {
        eprint "Usage:  continuous_ff_layers disp vel accel nlayers layersize z_center "
        exit
    }    
    cdef("cleanup_once", "continuous_ff_abort;", "_continuous_ff_cleanup_")    
    
    rel_disp = $1
    rel_vel = $2
    rel_accel = $3  
    nlayers = $4
	layersize = $5
	z_center_i = $6
    
    if (SYNC_FF_MODE != 1) {
        eprint "not in far-field mode"
        exit
    }

    
    atten FF_ATTEN
    set_beam_height FF_HEIGHT	
    set_beam_width FF_WIDTH
    
    comment "runnning energy check"
    ic_gain_check
    atten FF_ATTEN
    set_beam_height FF_HEIGHT	
    set_beam_width FF_WIDTH


    ###################################################################################
    ### Specify par and json file names. They are saved in DAQ sample directory ###    
    exp_type = sprintf("rams2_continuous_ff_layers-%s", SYNC_FF_DETECTOR)    
    fname_prefix = sprintf("id3a-%s-%s", exp_type, SAMPLENAME)    
    par_fname = sprintf("%s/%s/%s.par",DAQROOT,SAMPLEID, fname_prefix)    
    output_col_json_fname = sprintf("%s/%s/%s.json", DAQROOT, SAMPLEID, fname_prefix)
    ###################################################################################    

    ### json object: par file array colum title 
    output_col[0] = "date"
    output_col[1] = "time"
    output_col[2] = "epoch"
    output_col[3] = "SCAN_N"    
    if (SYNC_FF_DETECTOR == "dexela") {
        output_col[4] = "dex1" #DEX1:HDF1:FileNumber
        output_col[5] = "dex2" #DEX2:HDF1:FileNumber
    } else if (SYNC_FF_DETECTOR == "ge") {
        output_col[4] = "ge2start"       
        output_col[5] = "ge2end"
    }
    output_col[6] = "ramsx"
    output_col[7] = "ramsz"
    output_col[8] = "load"
    output_col[9] = "screw"     
    output_col[10] = "ome_start_req"
    output_col[11] = "ome_end_req"
    output_col[12] = "nframes_req"
    output_col[13] = "ome_start_real"
    output_col[14] = "ome_end_real"
    output_col[15] = "nframes_real"  
    output_col[16] = "step_real"
    output_col[17] = "count_time"
    output_col[18] = "foil_1"
    output_col[19] = "foil_2"
    output_col[20] = "foil_3"
    output_col[21] = "foil_4"

    
    ### Convert output_col array to a json object
    ### Save as a json object file in sample DAQ if it does not already exist    
    output_col_json = encode("json",output_col)

    if (file_info(output_col_json_fname, "-e") != 1) {
        open(output_col_json_fname)
        fprintf(output_col_json_fname, output_col_json)
        close(output_col_json_fname)
    }
    sampleinfo_json = sprintf("%s/%s/sampleinfo.json", AUXROOT, SAMPLEID)     
    ### log information about the sample as appropriate ### 
    if (file_info(par_fname, "-e") != 1) {
        open(par_fname)
        fprintf(par_fname, "#SAMPLENAME: %s\n#STATION: ID3A\n#EXPTYPE: %s\n", SAMPLENAME, exp_type)
        close(par_fname)
        if (file_info(sampleinfo_json, "-e") == 1) {
            sampleinfo_obj = getline(sampleinfo_json,0)
            sampleinfo_array = decode("json", sampleinfo_obj)
            for (sampleinfo_elem in sampleinfo_array) {
                open(par_fname)
                fprintf(par_fname, "#%s: %s\n", sampleinfo_elem, sampleinfo_array[sampleinfo_elem])
                close(par_fname)
            }
        }
    }
    
    comment "continuous_ff_layers %g %g %g %d %g %g" "rel_disp, rel_vel, rel_accel, nlayers, layersize, z_center_i"
    comment "collecting no load scan"    

	for (j=0; j<nlayers; j++) {
        comment "=== Processing layer %g ==" "j+1"
        umv ramsz (layersize*(-(nlayers/2)+1/2+j)+z_center_i)
        
        if (SYNC_FF_DETECTOR == "ge") {
            first_image = epics_get("GE2:cam1:FileNumber")
        }
        
        slew_ome FF_START (FF_START+FF_DEG) FF_NIMAGES FF_EXPTIME        
        get_angles
        
        if (SYNC_FF_DETECTOR == "dexela") {        
            open(par_fname)
            fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
            close(par_fname)
        } else if (SYNC_FF_DETECTOR == "ge") {        
            open(par_fname)
            fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("GE2:cam1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
            close(par_fname)                    
        }
    }
    umv ome FF_START
    
    crosshead_i = _wm_screw()
    comment "Initial rams screw position is %g" "crosshead_i"
    mvr_screw rel_disp 0 rel_vel rel_accel 
    comment "movement started"    
    crosshead_now = crosshead_i
    
    if (rel_disp > 0) { #tension case - DONT USE, NOT FULLY UPDATED
        exit_loop = 0
        while (((crosshead_now - crosshead_i) < (rel_disp-CONT_SCREW_TOL)) && (exit_loop == 0)) {        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()" 
	        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"      
            comment "collecting scan"

	        #every time we go back to layer 1 we will adjust ramsz to compensate for the screw motion:
	        crosshead_diff = fabs(crosshead_now-crosshead_i) 
	        z_center = z_center + crosshead_diff #note this will only move ramsz up, need to fix for tension

            for (j=0; j<nlayers; j++) {
		        comment "=== Processing layer %g ==" "j+1"
		        umv ramsz (layersize*(-(nlayers/2)+1/2+j)+z_center)
                
                if (SYNC_FF_DETECTOR == "ge") {
                    first_image = epics_get("GE2:cam1:FileNumber")
                }               
                
		        slew_ome FF_START (FF_START+FF_DEG) FF_NIMAGES FF_EXPTIME        
                get_angles
                if (SYNC_FF_DETECTOR == "dexela") {        
                    open(par_fname)
                    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                    close(par_fname)
                } else if (SYNC_FF_DETECTOR == "ge") {        
                    open(par_fname)
                    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("GE2:cam1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                    close(par_fname)                    
                }
		    }
		    umv ome FF_START
			
            crosshead_now = _wm_screw()  
            if (((crosshead_now - crosshead_i) > (rel_disp-CONT_SCREW_TOL)) || ((crosshead_now - crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "Target displacement reached" 
                comment "rams force is %g" "_wm_force()"
                comment "rams disp is %g" "_wm_screw()"        
                comment "continuous_ff done"
                exit_loop = 1
            }          
        }
        
    } else if (rel_disp < 0) { #compression case
        exit_loop = 0
        while (((crosshead_now - crosshead_i) > (rel_disp+CONT_SCREW_TOL)) && (exit_loop == 0)) {        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()" 
	        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
            comment "collecting scan"
			
	        #every time we go back to layer 1 we will adjust ramsz to compensate for the screw motion
	        crosshead_diff = fabs(crosshead_now-crosshead_i) 
	        z_center = z_center_i + crosshead_diff/2  
			
            for (j=0; j<nlayers; j++) {
		        comment "=== Processing layer %g ==" "j+1"
		        umv ramsz (layersize*(-(nlayers/2)+1/2+j)+z_center)
                if (SYNC_FF_DETECTOR == "ge") {
                    first_image = epics_get("GE2:cam1:FileNumber")
                }                               
		        slew_ome FF_START (FF_START+FF_DEG) FF_NIMAGES FF_EXPTIME
                get_angles
                if (SYNC_FF_DETECTOR == "dexela") {        
                    open(par_fname)
                    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, epics_get("DEX1:HDF1:FileNumber")-1, epics_get("DEX2:HDF1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                    close(par_fname)
                } else if (SYNC_FF_DETECTOR == "ge") {        
                    open(par_fname)
                    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, first_image, epics_get("GE2:cam1:FileNumber")-1, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), FF_START, FF_START+FF_DEG, FF_NIMAGES, S1P, F1P, N1P, STEP1P,  FF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
                    close(par_fname)                    
                }
		    }
	        umv ome FF_START
			
            crosshead_now = _wm_screw()
            if (((crosshead_now - crosshead_i)< (rel_disp+CONT_SCREW_TOL)) || ((crosshead_now - crosshead_i) == rel_disp)){
                mv_screw_abort
                comment "Target displacement reached" 
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"       
                comment "continuous_ff done"                
                exit_loop = 1
            }           
        
        }
    }
    mv_screw_abort    
}'

def continuous_ff_abort '{
    mv_screw_abort
}'



####################
### energy check ###
####################

def ic_gain_check '{
    local ic0_gain, ic1_gain, _height, _width, current_atten
    
    closes
    
    ### obtaining current ic gains, slit and attenuation settings ###
    ic0_gain = _get_ic_gain(ic0)
    ic1_gain = _get_ic_gain(ic1)
    _height = _get_beam_height()
    _width = _get_beam_width()
    current_atten = _watt()
    #################################
    
    ### setting ic gains same as the energy scan ###
    set_ic_gain ic0 ECHECK_IC0_GAIN
    set_ic_gain ic1 ECHECK_IC1_GAIN
    ##################################################
    
    close_garage_door
    #set_beam_height ECHECK_HEIGHT    
    #set_beam_width ECHECK_WIDTH    
    #rm_att        
    find_foil
    comment "ic counts with same gain settings as the energy scan: brightfield"        
    beamstop_open_check
    opens
    tseries 1 ECHECK_TIME
    closes        
    echeck_write_to_par
    
    ### setting ic gain back ###
    set_ic_gain ic0 ic0_gain
    set_ic_gain ic1 ic1_gain
    set_beam_height _height
    set_beam_width _width
    atten current_atten
    open_garage_door
}'


def echeck_write_to_par '{
    local par_fname  
    
    par_fname = sprintf("%s/%s/energy_log.par",DAQROOT,SAMPLEID)
    open(par_fname)     
    fprintf(par_fname, "\n%s %d %g %g %g", date(), SCAN_N, S[ic0], S[ic1], epics_get("CESR_BR_CURR"))
    close(par_fname)    
}'



##################
### near-field ###
##################

def do_nf_scan_layers '{
    local j nlayers layersize z_center, layer_start
    local output_col, output_col_json, output_col_json_fname, sampleinfo_json, sampleinfo_obj, sampleinfo_array, sampleinfo_elem
    local foil_1, foil_2, foil_3, foil_4

    if (($# != 3) && ($# !=4)) {
        eprint "Usage:  do_nf_scan_layers nlayers layersize z_center [layer_start]"
        exit
    }   

    nlayers = $1
    layersize = $2
    z_center = $3
    
    if ($# == 4) {
        layer_start = $4
    } else {
        layer_start = 1
    }
    
    if (layer_start > nlayers) {
        eprint "layer_start is greater than nlayers"
        exit
    }    
    

    if (SYNC_NF_MODE != 1) {
        eprint "not in near-field mode"
        exit
    }

    atten NF_ATTEN
    
    set_beam_height NF_HEIGHT
    set_beam_width NF_WIDTH

    #set guard slit height:
    set_guard_height NF_GUARD_HEIGHT

    umv nfbsz 0 #just in case
    
#    while (yesno("Cover on the Parker controller?", 0) == 0) {
#        continue
#    }        


    ###################################################################################
    ### Specify par and json file names. They are saved in DAQ sample directory ###    
    exp_type = sprintf("rams2_nf_scan_layers-%s", SYNC_NF_DETECTOR)    
    fname_prefix = sprintf("id3a-%s-%s", exp_type, SAMPLENAME)    
    par_fname = sprintf("%s/%s/%s.par",DAQROOT,SAMPLEID, fname_prefix)    
    output_col_json_fname = sprintf("%s/%s/%s.json", DAQROOT, SAMPLEID, fname_prefix)
    ###################################################################################

    ### json object: par file array colum title 

    output_col[0] = "date"
    output_col[1] = "time"
    output_col[2] = "epoch"
    output_col[3] = "SCAN_N"
    output_col[4] = "junkstart" #JUNKSTART
    output_col[5] = "goodstart" #GOODSTART
    output_col[6] = "sampx" #"ramsx"
    output_col[7] = "sampz" #"ramsz"
    output_col[8] = "load"
    output_col[9] = "screw"  
    output_col[10] = "screw encoder"    
    output_col[11] = "ome_start_req"
    output_col[12] = "ome_end_req"
    output_col[13] = "nframes_req"
    output_col[14] = "ome_start_real"
    output_col[15] = "ome_end_real"
    output_col[16] = "nframes_real"  
    output_col[17] = "step_real"
    output_col[18] = "count_time"
    output_col[19] = "foil_1"
    output_col[20] = "foil_2"
    output_col[21] = "foil_3"
    output_col[22] = "foil_4" 

    ### Convert output_col array to a json object
    ### Save as a json object file in sample DAQ if it does not already exist    
    output_col_json = encode("json",output_col)

    if (file_info(output_col_json_fname, "-e") != 1) {
        open(output_col_json_fname)
        fprintf(output_col_json_fname, output_col_json)
        close(output_col_json_fname)
    }
    sampleinfo_json = sprintf("%s/%s/sampleinfo.json", AUXROOT, SAMPLEID) 
    ### log information about the sample as appropriate ### 
    if (file_info(par_fname, "-e") != 1) {
        open(par_fname)
        fprintf(par_fname, "#SAMPLENAME: %s\n#STATION: ID3A\n#EXPTYPE: %s\n", SAMPLENAME, exp_type)
        close(par_fname)
        if (file_info(sampleinfo_json, "-e") == 1) {
            sampleinfo_obj = getline(sampleinfo_json,0)
            sampleinfo_array = decode("json", sampleinfo_obj)
            for (sampleinfo_elem in sampleinfo_array) {
                open(par_fname)
                fprintf(par_fname, "#%s: %s\n", sampleinfo_elem, sampleinfo_array[sampleinfo_elem])
                close(par_fname)
            }
        }
    }   
    comment "do_nf_scan_layers %d %g %g %d" "nlayers, layersize, z_center, layer_start"

    comment "=== near-field scan ==="

    for (j=layer_start-1; j<nlayers; j++) {
        comment "=== Processing layer %d ==" "j+1"
        umv ramsz (layersize*(-(nlayers/2)+1/2+j)+z_center)
        slew_ome NF_START (NF_START+NF_DEG) NF_NIMAGES NF_EXPTIME
        get_angles
        open(par_fname)
        fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), _wm_screw_encoder(), NF_START, NF_START+NF_DEG, NF_NIMAGES, S1P, F1P, N1P, STEP1P,  NF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4))
        close(par_fname)
    }
}'



##################
### tomography ###
##################

def tomo_sequence '{
    local par_fname, tomo_par_col, tomo_par_col_json, tomo_par_col_json_fname, tomo_type, tomo_type_json, tomo_type_json_fname
    local output_col, output_col_json, output_col_json_fname, sampleinfo_json, sampleinfo_obj, sampleinfo_array, sampleinfo_elem
    local foil_1, foil_2, foil_3, foil_4

    ###################################################################################
    ### Specify par and json file names. They are saved in DAQ sample directory ###    
    exp_type = sprintf("rams2_tomo_scan_layers-%s", SYNC_NF_DETECTOR)    
    fname_prefix = sprintf("id3a-%s-%s", exp_type, SAMPLENAME)    
    par_fname = sprintf("%s/%s/%s.par",DAQROOT,SAMPLEID, fname_prefix)    
    output_col_json_fname = sprintf("%s/%s/%s.json", DAQROOT, SAMPLEID, fname_prefix)
    ###################################################################################


    ### json object: par file array colum title 

    output_col[0] = "date"
    output_col[1] = "time"
    output_col[2] = "epoch"
    output_col[3] = "SCAN_N"
    output_col[4] = "junkstart" #JUNKSTART
    output_col[5] = "goodstart" #GOODSTART
    output_col[6] = "ramsx"
    output_col[7] = "ramsz"
    output_col[8] = "load"
    output_col[9] = "screw"     
    output_col[10] = "ome_start_req"
    output_col[11] = "ome_end_req"
    output_col[12] = "nframes_req"
    output_col[13] = "ome_start_real"
    output_col[14] = "ome_end_real"
    output_col[15] = "nframes_real"  
    output_col[16] = "step_real"
    output_col[17] = "count_time"
    output_col[18] = "foil_1"
    output_col[19] = "foil_2"
    output_col[20] = "foil_3"
    output_col[21] = "foil_4" 
    output_col[22] = "tomotype"

    ### Convert output_col array to a json object
    ### Save as a json object file in sample DAQ if it does not already exist    
    output_col_json = encode("json",output_col)

    if (file_info(output_col_json_fname, "-e") != 1) {
        open(output_col_json_fname)
        fprintf(output_col_json_fname, output_col_json)
        close(output_col_json_fname)
    }
    sampleinfo_json = sprintf("%s/%s/sampleinfo.json", AUXROOT, SAMPLEID) 
    ### log information about the sample as appropriate ### 
    if (file_info(par_fname, "-e") != 1) {
        open(par_fname)
        fprintf(par_fname, "#SAMPLENAME: %s\n#STATION: ID3A\n#EXPTYPE: %s\n", SAMPLENAME, exp_type)
        close(par_fname)
        if (file_info(sampleinfo_json, "-e") == 1) {
            sampleinfo_obj = getline(sampleinfo_json,0)
            sampleinfo_array = decode("json", sampleinfo_obj)
            for (sampleinfo_elem in sampleinfo_array) {
                open(par_fname)
                fprintf(par_fname, "#%s: %s\n", sampleinfo_elem, sampleinfo_array[sampleinfo_elem])
                close(par_fname)
            }
        }
    }   
    
    umv nfbsz NFBSZ_OUT
	comment "taking darkfield 1 ...."
	slew_ome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_DFBF_EXPTIME darkfield
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), TOMO_DFBF_START, TOMO_DFBF_START+TOMO_DFBF_DEG, TOMO_DFBBF_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_DFBF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "df1")
    close(par_fname)

	umv ramsx -4
	comment "taking brightfield 1 ...."
	slew_ome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_DFBF_EXPTIME
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), TOMO_DFBF_START, TOMO_DFBF_START+TOMO_DFBF_DEG, TOMO_DFBBF_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_DFBF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "bf1")
    close(par_fname)
	umv ramsx 0

	comment "doing the tomography scan"
	slew_ome TOMO_START (TOMO_START+TOMO_DEG) TOMO_IMAGES TOMO_EXPTIME
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), TOMO_START, TOMO_START+TOMO_DEG, TOMO_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "ts1")
    close(par_fname)

	comment "taking darkfield 2 ...."
	slew_ome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_DFBF_EXPTIME darkfield
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), TOMO_DFBF_START, TOMO_DFBF_START+TOMO_DFBF_DEG, TOMO_DFBBF_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_DFBF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "df2")
    close(par_fname)

	umv ramsx -4
	comment "taking brightfield 2 ...."
	slew_ome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_DFBF_EXPTIME
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[ramsx], A[ramsz], _wm_force(), _wm_screw(), TOMO_DFBF_START, TOMO_DFBF_START+TOMO_DFBF_DEG, TOMO_DFBBF_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_DFBF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "bf2")
    close(par_fname)
	umv ramsx 0    
}'

def tomo_sequence_cclf '{
    local par_fname, tomo_par_col, tomo_par_col_json, tomo_par_col_json_fname, tomo_type, tomo_type_json, tomo_type_json_fname
    local output_col, output_col_json, output_col_json_fname, sampleinfo_json, sampleinfo_obj, sampleinfo_array, sampleinfo_elem
    local foil_1, foil_2, foil_3, foil_4

    ###################################################################################
    ### Specify par and json file names. They are saved in DAQ sample directory ###    
    exp_type = sprintf("rams2_tomo_scan_layers-%s", SYNC_NF_DETECTOR)    
    fname_prefix = sprintf("id3a-%s-%s", exp_type, SAMPLENAME)    
    par_fname = sprintf("%s/%s/%s.par",DAQROOT,SAMPLEID, fname_prefix)    
    output_col_json_fname = sprintf("%s/%s/%s.json", DAQROOT, SAMPLEID, fname_prefix)
    ###################################################################################


    ### json object: par file array colum title 

    output_col[0] = "date"
    output_col[1] = "time"
    output_col[2] = "epoch"
    output_col[3] = "SCAN_N"
    output_col[4] = "junkstart" #JUNKSTART
    output_col[5] = "goodstart" #GOODSTART
    output_col[6] = "sampXb"
    output_col[7] = "rsampz"
    output_col[8] = "load"    
    output_col[10] = "ome_start_req"
    output_col[11] = "ome_end_req"
    output_col[12] = "nframes_req"
    output_col[13] = "ome_start_real"
    output_col[14] = "ome_end_real"
    output_col[15] = "nframes_real"  
    output_col[16] = "step_real"
    output_col[17] = "count_time"
    output_col[18] = "foil_1"
    output_col[19] = "foil_2"
    output_col[20] = "foil_3"
    output_col[21] = "foil_4" 
    output_col[22] = "tomotype"

    ### Convert output_col array to a json object
    ### Save as a json object file in sample DAQ if it does not already exist    
    output_col_json = encode("json",output_col)

    if (file_info(output_col_json_fname, "-e") != 1) {
        open(output_col_json_fname)
        fprintf(output_col_json_fname, output_col_json)
        close(output_col_json_fname)
    }
    sampleinfo_json = sprintf("%s/%s/sampleinfo.json", AUXROOT, SAMPLEID) 
    ### log information about the sample as appropriate ### 
    if (file_info(par_fname, "-e") != 1) {
        open(par_fname)
        fprintf(par_fname, "#SAMPLENAME: %s\n#STATION: ID3A\n#EXPTYPE: %s\n", SAMPLENAME, exp_type)
        close(par_fname)
        if (file_info(sampleinfo_json, "-e") == 1) {
            sampleinfo_obj = getline(sampleinfo_json,0)
            sampleinfo_array = decode("json", sampleinfo_obj)
            for (sampleinfo_elem in sampleinfo_array) {
                open(par_fname)
                fprintf(par_fname, "#%s: %s\n", sampleinfo_elem, sampleinfo_array[sampleinfo_elem])
                close(par_fname)
            }
        }
    }   
    
    umv nfbsz NFBSZ_OUT
    comment "taking darkfield 1 ...."
    slew_scan cclfome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_DFBF_EXPTIME darkfield
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[sampXb], A[rsampz], _get_cclf_load(), TOMO_DFBF_START, TOMO_DFBF_START+TOMO_DFBF_DEG, TOMO_DFBBF_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_DFBF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "df1")
    close(par_fname)

	umv sampXb -4
	comment "taking brightfield 1 ...."
	slew_scan cclfome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_DFBF_EXPTIME
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[sampXb], A[rsampz], _get_cclf_load(), TOMO_DFBF_START, TOMO_DFBF_START+TOMO_DFBF_DEG, TOMO_DFBBF_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_DFBF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "bf1")
    close(par_fname)
	umv sampXb 0

	comment "doing the tomography scan"
	slew_scan cclfome TOMO_START (TOMO_START+TOMO_DEG) TOMO_IMAGES TOMO_EXPTIME
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[sampXb], A[rsampz], _get_cclf_load(), TOMO_START, TOMO_START+TOMO_DEG, TOMO_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "ts1")
    close(par_fname)

	comment "taking darkfield 2 ...."
	slew_scan cclfome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_DFBF_EXPTIME darkfield
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[sampXb], A[rsampz], _get_cclf_load(), TOMO_DFBF_START, TOMO_DFBF_START+TOMO_DFBF_DEG, TOMO_DFBBF_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_DFBF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "df2")
    close(par_fname)

	umv sampXb -4
	comment "taking brightfield 2 ...."
	slew_scan cclfome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_DFBF_EXPTIME
    open(par_fname)
    fprintf(par_fname, "\n%s %s %d %d %d %d %g %g %g %g %d %g %g %d %g %g %s %s %s %s %s", date("%Y%m%d"), date("%H%M%S"), time(), SCAN_N, JUNKSTART, GOODSTART, A[sampXb], A[rsampz], _get_cclf_load(), TOMO_DFBF_START, TOMO_DFBF_START+TOMO_DFBF_DEG, TOMO_DFBBF_IMAGES, S1P, F1P, N1P, STEP1P,  TOMO_DFBF_EXPTIME, _foil_status_h(1), _foil_status_h(2), _foil_status_h(3), _foil_status_h(4), "bf2")
    close(par_fname)
	umv sampXb 0    
}'

def do_tomo_scan_layers_cclf '{
    local j nlayers layersize z_center, layer_start

    if (($# != 3) && ($# != 4)) {
	eprint "Usage:  do_tomo_scan_layers_cclf nlayers layersize z_center [layer_start]"
	exit
    }    

    nlayers = $1
    layersize = $2
    z_center = $3
    if ($# == 4) {
        layer_start = $4        
    } else {
        layer_start = 1
    }

    if (SYNC_NF_MODE != 1) {
        eprint "not in near-field mode"
        exit
    }

    atten TOMO_ATTEN
    
    set_beam_height TOMO_HEIGHT
    set_beam_width TOMO_WIDTH
    set_guard_height TOMO_GUARD_HEIGHT
    umv nfbsz NFBSZ_OUT
    closes
    umv sampXb 0
    
    #while (yesno("Cover on the Parker controller?", 0) == 0) {
    #    continue
    #}
        
    comment "=== tomo-field scan ==="

    for (j=layer_start-1; j<nlayers; j++) {
	comment "=== Processing layer %d ==" "j+1"
	umv rsampz (layersize*(-(nlayers/2)+1/2+j)+z_center)
        tomo_sequence_cclf
    }
}'


def do_tomo_scan_layers '{
    local j nlayers layersize z_center, layer_start

    if (($# != 3) && ($# != 4)) {
	eprint "Usage:  do_tomo_scan_layers nlayers layersize z_center [layer_start]"
	exit
    }    

    nlayers = $1
    layersize = $2
    z_center = $3
    if ($# == 4) {
        layer_start = $4        
    } else {
        layer_start = 1
    }

    if (SYNC_NF_MODE != 1) {
        eprint "not in near-field mode"
        exit
    }

    atten TOMO_ATTEN
    
    set_beam_height TOMO_HEIGHT
    set_beam_width TOMO_WIDTH
    set_guard_height TOMO_GUARD_HEIGHT
    umv nfbsz NFBSZ_OUT
    closes
    umv ramsx 0
    
    #while (yesno("Cover on the Parker controller?", 0) == 0) {
    #    continue
    #}
        
    comment "=== tomo-field scan ==="

    for (j=layer_start-1; j<nlayers; j++) {
	comment "=== Processing layer %d ==" "j+1"
	umv ramsz (layersize*(-(nlayers/2)+1/2+j)+z_center)
        tomo_sequence
    }
}'


def continuous_tomo '{
    local k, rel_disp, rel_vel, rel_accel, z_center, crosshead_i, crosshead_now, z_new

    if ($# != 4) {
        eprint "Usage:  continuous_tomo disp vel accel z_center"
        exit
    }    
    cdef("cleanup_once", "continuous_tomo_abort;", "_continuous_tomo_cleanup_")    
    
    rel_disp = $1
    rel_vel = $2
    rel_accel = $3
    z_center = $4    
    
    if (SYNC_NF_MODE != 1) {
        eprint "not in near-field mode"
        exit
    }


    beamstop_open_check

    atten TOMO_ATTEN
    set_beam_height TOMO_HEIGHT	
    hutch_light_off


    umv nfbsz NFBSZ_OUT    
    
	comment "taking darkfield 1 ...."
	slew_ome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_EXPTIME_CONT darkfield

    
    umv ramsx -4
	comment "taking brightfield 1 ...."
	slew_ome TOMO_DFBF_START (TOMO_DFBF_START+TOMO_DFBF_DEG) TOMO_DFBBF_IMAGES TOMO_EXPTIME_CONT
    umv ramsx 0

    comment "collecting no load radiographs"    
    slew_ome TOMO_START (TOMO_START+TOMO_DEG) TOMO_IMAGES_CONT TOMO_EXPTIME_CONT

    crosshead_i = _wm_screw()
    comment "Initial rams screw position is %g" "crosshead_i"
    mvr_screw rel_disp 0 rel_vel rel_accel 
    comment "movement started"    
    crosshead_now = crosshead_i
    
    if (rel_disp > 0) {
        while ((crosshead_now - crosshead_i) < (rel_disp-CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()" 
	        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
            comment "collecting radiographs"

            slew_ome TOMO_START (TOMO_START+TOMO_DEG) TOMO_IMAGES_CONT TOMO_EXPTIME_CONT      
            
            crosshead_now = _wm_screw()  
            if (((crosshead_now -crosshead_i)> (rel_disp-CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_rad done"
                exit
            }          
        }
        
    } else if (rel_disp < 0) {
        while ((crosshead_now - crosshead_i) > (rel_disp+CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()"        
            comment "collecting scan"
            slew_ome TOMO_START (TOMO_START+TOMO_DEG) TOMO_IMAGES_CONT TOMO_EXPTIME_CONT

            crosshead_now = _wm_screw()
            #adjust ramsz to compensate for the screw motion:
	        crosshead_diff = fabs(crosshead_now-crosshead_i) 
	        z_new = z_center + crosshead_diff/2
            umv ramsz z_new  

            if (((crosshead_now-crosshead_i) < (rel_disp+CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_tomo done"                
                exit
            }           
        
        }
    }
    mv_screw_abort    
}'

def continuous_tomo_abort '{
    mv_screw_abort
}'


def take_rad '{
    if (SYNC_NF_MODE != 1) {
        sync_nf_on    
    }    
    atten RAD_ATTEN
    set_beam_height RAD_HEIGHT
    hutch_light_off
    umv ramsz RAD_Z   
    umv ome RAD_OME
    umv nfbsz 2
    sync_nf_multiple_exp 1 RAD_EXPTIME    
    rad_write_to_par  
    hutch_light_on   
}'

def take_rad_multiple '{
    if ($# != 1) {
	eprint "Usage:  take_rad_multiple [number of frames]"
	exit
    }

    local nframes

    nframes = $1

    if (SYNC_NF_MODE != 1) {
        sync_nf_on    
    }    

    atten RAD_ATTEN
    set_beam_height RAD_HEIGHT
    hutch_light_off
    umv ramsz RAD_Z   
    umv ome RAD_OME
    umv nfbsz 2
    sync_nf_multiple_exp nframes RAD_EXPTIME    
    rad_write_to_par  
    hutch_light_on   
}'


def rad_write_to_par '{
    local par_fname
    
    par_fname = sprintf("%s/%s/rad.par",DAQROOT,SAMPLEID)
    open(par_fname)     
    fprintf(par_fname, "\n%s %s %d %d %g %g %g", date("%Y%m%d"), date("%H%M%S"), time(), epics_get("QIMAGE1:TIFF1:FileNumber")-1, _wm_force(), _wm_screw(), A[ome])
    close(par_fname) 
}'


def mvr_with_rad '{
    if ($# != 4) {
	eprint "Usage:  mvr_with_rad displacement block vel accel"
	exit
    }
    mvr_screw $1 $2 $3 $4    
    take_rad
}'

def continuous_rad '{
    local k, rel_disp, rel_vel, rel_accel, z_center, crosshead_i, crosshead_now, z_new

    if ($# != 4) {
        eprint "Usage:  continuous_rad disp vel accel z_center"
        exit
    }    
    cdef("cleanup_once", "continuous_rad_abort;", "_continuous_rad_cleanup_")    
    
    rel_disp = $1
    rel_vel = $2
    rel_accel = $3
    z_center = $4    
    
    if (SYNC_NF_MODE != 1) {
        eprint "not in near-field mode"
        exit
    }


    beamstop_open_check

    atten RAD_ATTEN
    set_beam_height RAD_HEIGHT	
    set_beam_width RAD_WIDTH
    hutch_light_off
    umv nfbsz 2

    comment "collecting no load radiographs"    
    sync_nf_multiple_exp 1 RAD_EXPTIME

    crosshead_i = _wm_screw()
    comment "Initial rams screw position is %g" "crosshead_i"
    mvr_screw rel_disp 0 rel_vel rel_accel 
    comment "movement started"    
    crosshead_now = crosshead_i
    
    if (rel_disp > 0) {
        while ((crosshead_now - crosshead_i) < (rel_disp-CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()" 
	        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
            comment "collecting radiographs"

            sync_nf_multiple_exp 1 RAD_EXPTIME      
            
            crosshead_now = _wm_screw()  
            if (((crosshead_now -crosshead_i)> (rel_disp-CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_rad done"
                exit
            }          
        }
        
    } else if (rel_disp < 0) {
        while ((crosshead_now - crosshead_i) > (rel_disp+CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()"        
            comment "collecting scan"
            sync_nf_multiple_exp 1 RAD_EXPTIME 

            crosshead_now = _wm_screw()
            #adjust ramsz to compensate for the screw motion:
	    crosshead_diff = fabs(crosshead_now-crosshead_i) 
	    z_new = z_center + crosshead_diff/2
            umv ramsz z_new  

            if (((crosshead_now-crosshead_i) < (rel_disp+CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_rad done"                
                exit
            }           
        
        }
    }
    mv_screw_abort    
}'

def continuous_rad_abort '{
    mv_screw_abort
}'

#################################
### digital image correlation ###
#################################

def dic_write_to_par '{
    local par_fname
	
    par_fname = sprintf("%s/%s/dic.par",DAQROOT,SAMPLEID)
    open(par_fname)  
    #FOR RAMS:   
    fprintf(par_fname, "\n%s %s %d %d %g %g %g %g", date("%Y%m%d"), date("%H%M%S"), time(), epics_get("PG1:TIFF1:FileNumber")-1, _wm_screw(), _wm_force(), A[ome], _wm_screw_encoder())
    #FOR CCLF:
    #fprintf(par_fname, "\n%s %s %d %d %g %g %g", date("%Y%m%d"), date("%H%M%S"), time(), epics_get("PG1:TIFF1:FileNumber")-1, 1, 1, _get_cclf_load(), A[cclfome])
    close(par_fname) 
}'


def take_dic '{
    hutch_light_off
    #FOR RAMS:
    umv ramsz DIC_Z ome DIC_OME
    #for CCLF:
    #umv rsampz DIC_Z cclfome DIC_OME
    dic_exposure DIC_EXPTIME 1
    dic_write_to_par  
    hutch_light_on

}'


def take_dic_four_sides '{
	local i, dic_side
	
    hutch_light_off
    umv ramsz DIC_Z    
    for (i=0; i<4; i++) {
        dic_side = (DIC_OME-180)+90*i
        umv ome dic_side
        dic_exposure DIC_EXPTIME 1
        dic_write_to_par
    }
    hutch_light_on 
}'	


def mv_screw_dic '{
    local par_fname	
	
    if ($# != 4) {
        eprint "Usage:  mv_screw_dic pos block vel accel"
	    exit
    }	
    mv_screw $1 $2 $3 $4
    take_dic
    take_dic
}'


def mvr_screw_dic '{
    local par_fname
	
    if ($# != 4) {
        eprint "Usage:  mvr_screw_dic step block vel accel"
	exit
    }
    mvr_screw $1 $2 $3 $4
    take_dic
    take_dic

}'

def mvr_screw_dic_KW '{
    local par_fname
	
    if ($# != 5) {
        eprint "Usage:  mvr_screw_dic_KW step block vel accel backstep"
	exit
    }
    eprint "Initial DIC"
    take_dic
    take_dic
	
    eprint "Screw + DIC"
    mvr_screw $1 $2 $3 $4
    take_dic
    take_dic

    eprint "Back-Screw + DIC"	
    mvr_screw $5 $2 $3 $4   
    take_dic
    take_dic

}'

def continuous_dic '{
    local k, rel_disp, rel_vel, rel_accel, crosshead_i, crosshead_now   

    if ($# != 3) {
        eprint "Usage:  continuous_dic disp vel accel"
        exit
    }    
    cdef("cleanup_once", "continuous_dic_abort;", "_continuous_dic_cleanup_")    
    
    rel_disp = $1
    rel_vel = $2
    rel_accel = $3    
    
    hutch_light_off

    comment "collecting DICs before loading"

    take_dic
    take_dic    
    
    crosshead_i = _wm_screw()
    comment "Initial rams screw position is %g" "crosshead_i"
    mvr_screw rel_disp 0 rel_vel rel_accel 
    comment "movement started"    
    crosshead_now = crosshead_i
    
    if (rel_disp > 0) { #tension
        while ((crosshead_now - crosshead_i) < (rel_disp-CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()" 
	        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
            comment "collecting scan"

            take_dic
            take_dic        
            
            crosshead_now = _wm_screw()  
            if (((crosshead_now -crosshead_i)> (rel_disp-CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		        comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_dic done"
                exit
            }          
        }
        
    } else if (rel_disp < 0) {
        while ((crosshead_now - crosshead_i) > (rel_disp+CONT_SCREW_TOL)){        
            comment "rams force is %g" "_wm_force()"
            comment "rams screw position is %g" "_wm_screw()"        
            comment "collecting scan"
            
            take_dic
            take_dic

            crosshead_now = _wm_screw()
            if (((crosshead_now-crosshead_i) < (rel_disp+CONT_SCREW_TOL)) || ((crosshead_now-crosshead_i) == rel_disp)) {
                mv_screw_abort
                comment "rams force is %g" "_wm_force()"
                comment "rams screw position is %g" "_wm_screw()" 
		comment "rams screw has moved %g from initial position" "(crosshead_now - crosshead_i)"        
                comment "continuous_ff done"                
                exit
            }
        }
    }
    mv_screw_abort    
}'


###################
### combination ###
###################

#to be used before a series of moves with ff_mvr_screw_dic
#uses the far-field parameters defined at the top of the macro
def prep_ff_condx '{

    if (SYNC_FF_MODE != 1) {
        eprint "not in far-field mode"
        exit
    }
 
    set_beam_height FF_HEIGHT 
    set_beam_width FF_WIDTH 
    set_guard_height FF_GUARD_HEIGHT
    atten FF_ATTEN 
}'


#mvr_screw, then take dic 2x, then do a 0-10 degree ff scan
def ff_mvr_screw_dic '{
    local par_fname
	
    if ($# != 4) {
        eprint "Usage:  ff_mvr_screw_dic step block vel accel"
	exit
    }
    mvr_screw $1 $2 $3 $4
    take_dic
    take_dic
    slew_ome 0 10 40 0.25

}'

def tomo_mvr_screw_dic '{
    local tomo_nlayers, tomo_layersize, tomo_z_center, step, vel, accel, nsteps, jj, k, ndic, step_start
	
    if (($# != 8) && ($# !=9)) {
        print "tomo_mvr_screw_dic nlayers layersize z_center rel_disp vel accel nsteps ndic [step_start]"

        exit
    }
	
    tomo_nlayers = $1
    tomo_layersize = $2
    tomo_z_center = $3
    rel_disp = $4
    vel = $5
    accel = $6
    nsteps = $7
    ndic = $8
    if ($# == 9) {
        step_start = $9
    } else {
        step_start = 1
    }
		
    comment "tomo_mvr_screw_dic %d %g %g %g %g %g %d %d %d" "tomo_nlayers, tomo_layersize, tomo_z_center, rel_disp, vel, accel, nsteps, ndic, step_start"
	
    take_dic
    for (jj=step_start-1; jj<nsteps; jj++) {
        comment "=== displacement step %d ===" "jj+1"
        do_tomo_scan_layers tomo_nlayers tomo_layersize tomo_z_center

        for (k=0; k<ndic; k++) {
            mvr_screw_dic rel_disp 1 vel accel
        }
    }
}'

def tomo_mvr_screw_dic_unload5um '{
    local tomo_nlayers, tomo_layersize, tomo_z_center, step, vel, accel, nsteps, jj, k, ndic, step_start
	
    if (($# != 8) && ($# !=9)) {
        print "tomo_mvr_screw_dic nlayers layersize z_center rel_disp vel accel nsteps ndic [step_start]"

        exit
    }
	
    tomo_nlayers = $1
    tomo_layersize = $2
    tomo_z_center = $3
    rel_disp = $4
    vel = $5
    accel = $6
    nsteps = $7
    ndic = $8
    if ($# == 9) {
        step_start = $9
    } else {
        step_start = 1
    }
		
    comment "tomo_mvr_screw_dic_unload5um %d %g %g %g %g %g %d %d %d" "tomo_nlayers, tomo_layersize, tomo_z_center, rel_disp, vel, accel, nsteps, ndic, step_start"
	
    take_dic
    for (jj=step_start-1; jj<nsteps; jj++) {
        comment "=== displacement step %d ===" "jj+1"
        do_tomo_scan_layers tomo_nlayers tomo_layersize tomo_z_center

        for (k=0; k<ndic; k++) {
            mvr_screw_dic rel_disp 1 vel accel
        }
        mvr_screw_dic -0.005 1 0.005 0.005
    }
}'

def mvr_dic_increments '{
     local rel_disp vel accel n_increments
     
     if ($# != 4) {
	print "mvr_dic_increments rel_disp vel accel n_increments"
	exit
     }
    
    rel_disp = $1
    vel = $2
    accel = $3
    n_increments = $4
	
    comment "mvr_dic_increments %g %g %g %d" "rel_disp, vel, accel, n_increments"

    take_dic

    for (k=0; k<n_increments; k++) {
        mvr_screw_dic rel_disp 1 vel accel
    }
    
}'


def ff_scan_layers_with_rad '{
    local j, nlayers, layersize, z_center
    
    if ($# != 3) {
        eprint "Usage:  do_ff_scan_layers_with_rad nlayers layersize z_center"
        exit
    }

    nlayers = $1
    layersize = $2
    z_center = $3
    
    if (SYNC_FF_MODE != 1) {
        eprint "not in far-field mode"
        exit
    }

    comment "=== beginning ff/load series ==="
      
    set_beam_height FF_HEIGHT
    atten FF_ATTEN
    ic_gain_check
    set_beam_height FF_HEIGHT # just to be sure
    atten FF_ATTEN

    for (j=0; j<nlayers; j++) {
        comment "=== Processing layer %d ==" "j+1"
        umv ramsz (layersize*(-(nlayers/2)+1/2+j)+z_center)
        slew_ome 0 FF_DEG FF_NIMAGES FF_EXPTIME
    }    
    take_rad   
}'


def question_test '{
    while (yesno("did you turn off the hutch light?", 0) == 0) {
        continue
    }
}'

def mv_screw_record '{
    local par_fname	
	
    if (($# == 0) || ($# > 4)) {
        eprint "Usage:  mv_screw_record pos [block] [vel] [accel]"
	exit
    }	
	mv_screw $1 $2 $3 $4
        par_fname = sprintf("%s/%s/rams_load_record.par",DAQROOT,SAMPLEID) 
	open(par_fname)
	fprintf(par_fname, "\n%s %s %d %g %g", date("%Y%m%d"), date("%H%M%S"), time(), _wm_screw(), _wm_force())
        close(par_fname)   
}'


def mvr_screw_record '{
    local par_fname
    if (($# == 0) || ($# > 4)) {
        eprint "Usage:  mvr_screw_record step [block] [vel] [accel]"
	exit
    }
	mvr_screw $1 $2 $3 $4
        par_fname = sprintf("%s/%s/rams_load_record.par",DAQROOT,SAMPLEID) 
	open(par_fname)
	fprintf(par_fname, "\n%s %s %d %g %g", date("%Y%m%d"), date("%H%M%S"), time(), _wm_screw(), _wm_force())
        close(par_fname)       
}'

def find_layer_centroids '{

    local j nlayers layersize z_center

    nlayers = $1
    layersize = $2
    z_center = $3
	
    for (j=nlayers-1; j>=0; j--) {
       	comment "=== Moving to layer %d ==" "j+1"
	p layersize*(-(nlayers/2)+1/2+j)+z_center
}
}'


def sync_onoff_test '{
	local j, num_cycles
	
	num_cycles = 1
	
	for (j=0; j<num_cycles; j++) {
		if (SYNC_FF_MODE == 1) {
            sync_ff_off
            printf("\nRemoving ff scan parameters again...")
            cdef("", "", "_sync_ff_", "delete")
	    }
        sync_tomo_on
	    printf("\nConfiguring nf new file again...")
        cdef("user_newfile", "_sync_nf_newfile;", "_sync_nf_")
        printf("\nConfiguring nf scan parameters again...")
        cdef("sync_user_scan_head", "_sync_nf_scan_head;", "_sync_nf_")   
        cdef("sync_user_scan_tail", "_sync_nf_scan_tail;", "_sync_nf_")
        cdef("sync_user_abort", "_sync_nf_abort;", "_sync_nf_")	
	
	    slew_ome 0 5 10 1 darkfield

        sync_nf_off
	    cdef("", "", "_sync_nf_", "delete")		
	    sync_ff_on
	    printf("\nConfiguring ff new file again...")
        cdef("user_newfile", "_sync_ff_newfile;", "_sync_ff_")
        printf("\nConfiguring ff scan parameters again...")
        cdef("sync_user_scan_head", "_sync_ff_scan_head;", "_sync_ff_")
        cdef("sync_user_scan_tail", "_sync_ff_scan_tail;", "_sync_ff_")
        cdef("sync_user_abort", "_sync_ff_abort;", "_sync_ff_")		
	    slew_ome 0 10 40 0.25 darkfield
	}
}'


###############################
####Combining functions########
###############################



def _bad_lim_check(motor_input, pos_input) '{
    if (dial(motor_num(motor_input), pos_input) < get_lim(motor_num(motor_input), -1)) {
        _bad_lim++
        return sprintf("Adjust %g. %s will hit low limit at dial %g.\n", pos_input, motor_mne(motor_num(motor_input)), get_lim(motor_num(motor_input), -1))
    }
    if (dial(motor_num(motor_input), pos_input) > get_lim(motor_num(motor_input), 1)) {
        _bad_lim++
        return sprintf("Adjust %g. %s will hit high limit at dial %g.\n", pos_input, motor_mne(motor_num(motor_input)), get_lim(motor_num(motor_input), 1))
    }
}'


def bad_lim_check '{
    if (_bad_lim_check($1, $2) !=0) {
        printf ("%s", _bad_lim_check($1, $2))
    }
}'


def bad_lim_exit '{
    if (_bad_lim > 0) {
        _bad_lim = 0
        exit
    } else {
        _bad_lim = 0
    }
}'

########
## cyclic loading
########

DISP_CYCLE_MAX_SCREW = -14.39
DISP_CYCLE_MIN_SCREW = -14.40
def disp_cycle '{

    if ($# != 3) {
        eprint "Usage:  disp_cycle num_cycles top_point bot_point"
	exit
    }
    
    local start_pos, num_cycles, top_point, bot_point
    
    start_pos=_wm_screw()
    num_cycles = $1
    top_point = $2
    bot_point = $3
    
    if (top_point > DISP_CYCLE_MAX_SCREW) {
        comment "top position is greater than defined max screw %g" "DISP_CYCLE_MAX_SCREW"
        exit
    }

    if (bot_point < DISP_CYCLE_MIN_SCREW) {
        comment "bottom position is less than defined min screw %g" "DISP_CYCLE_MIN_SCREW"
        exit
    }
    
    comment "disp_cycle %d %g %g" "num_cycles, top_point, bot_point"
    comment "Start position is %g" "start_pos"

    for (j=0; j<num_cycles; j++) {
	comment "Begining cycle %d of %d" "j+1, num_cycles"
	mv_screw_record bot_point 1 0.05 0.05
	mv_screw_record top_point 1 0.05 0.05
	comment "End of cycle %d of %d" "j+1, num_cycles"
    }
    comment "Done with this set of cycles."
    take_dic
    take_dic
}'

def disp_cycle_write_to_par '{
    local par_fname  
    
    par_fname = sprintf("%s/%s/disp_cycle.par",DAQROOT,SAMPLEID)
    open(par_fname)     
    fprintf(par_fname, "\n%s %g %g", date(), "_wm_force()", "_wm_screw()")
    close(par_fname)    
}'



